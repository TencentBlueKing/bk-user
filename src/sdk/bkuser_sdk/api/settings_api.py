# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bkuser_sdk.api_client import ApiClient


class SettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_settings_list(self, category_id, **kwargs):  # noqa: E501
        """v2_settings_list  # noqa: E501

        配置项  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_settings_list(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :param str key:
        :param str namespace:
        :param str region:
        :param str domain:
        :return: list[Setting]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_settings_list_with_http_info(category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_settings_list_with_http_info(category_id, **kwargs)  # noqa: E501
            return data

    def v2_settings_list_with_http_info(self, category_id, **kwargs):  # noqa: E501
        """v2_settings_list  # noqa: E501

        配置项  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_settings_list_with_http_info(category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int category_id: (required)
        :param str key:
        :param str namespace:
        :param str region:
        :param str domain:
        :return: list[Setting]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["category_id", "key", "namespace", "region", "domain"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_settings_list" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'category_id' is set
        if "category_id" not in params or params["category_id"] is None:
            raise ValueError(
                "Missing the required parameter `category_id` when calling `v2_settings_list`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "key" in params:
            query_params.append(("key", params["key"]))  # noqa: E501
        if "namespace" in params:
            query_params.append(("namespace", params["namespace"]))  # noqa: E501
        if "region" in params:
            query_params.append(("region", params["region"]))  # noqa: E501
        if "category_id" in params:
            query_params.append(("category_id", params["category_id"]))  # noqa: E501
        if "domain" in params:
            query_params.append(("domain", params["domain"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/settings/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[Setting]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
