# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from bkuser_sdk.api_client import ApiClient


class ProfilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v2_profiles_create(self, body, **kwargs):  # noqa: E501
        """v2_profiles_create  # noqa: E501

        创建用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProfile body: (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def v2_profiles_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """v2_profiles_create  # noqa: E501

        创建用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateProfile body: (required)
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_create" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `v2_profiles_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Profile",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_delete(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_delete  # noqa: E501

        删除用户 目前采用软删除  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_delete(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_delete_with_http_info(lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_delete_with_http_info(lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_delete_with_http_info(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_delete  # noqa: E501

        删除用户 目前采用软删除  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_delete_with_http_info(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_delete" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_delete`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_generate_token(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_generate_token  # noqa: E501

        生成用户 Token 生成代表用户的 Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_generate_token(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: ProfileToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_generate_token_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_generate_token_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_generate_token_with_http_info(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_generate_token  # noqa: E501

        生成用户 Token 生成代表用户的 Token  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_generate_token_with_http_info(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: ProfileToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method v2_profiles_generate_token" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v2_profiles_generate_token`"
            )  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_generate_token`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/token/",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="ProfileToken",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_get_departments(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_get_departments  # noqa: E501

        获取用户所属部门信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_get_departments(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :param bool with_family: 是否返回所有祖先（兼容）
        :param bool with_ancestors: 是否返回所有祖先
        :return: list[SimpleDepartment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_get_departments_with_http_info(lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_get_departments_with_http_info(lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_get_departments_with_http_info(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_get_departments  # noqa: E501

        获取用户所属部门信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_get_departments_with_http_info(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :param bool with_family: 是否返回所有祖先（兼容）
        :param bool with_ancestors: 是否返回所有祖先
        :return: list[SimpleDepartment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "lookup_value",
            "ordering",
            "page",
            "page_size",
            "fields",
            "lookup_field",
            "include_disabled",
            "with_family",
            "with_ancestors",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method v2_profiles_get_departments" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_get_departments`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "ordering" in params:
            query_params.append(("ordering", params["ordering"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("page_size", params["page_size"]))  # noqa: E501
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501
        if "with_family" in params:
            query_params.append(("with_family", params["with_family"]))  # noqa: E501
        if "with_ancestors" in params:
            query_params.append(("with_ancestors", params["with_ancestors"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/departments/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[SimpleDepartment]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_get_leaders(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_get_leaders  # noqa: E501

        获取用户上级信息 包含该用户关联的所有上级信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_get_leaders(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: list[SimpleDepartment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_get_leaders_with_http_info(lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_get_leaders_with_http_info(lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_get_leaders_with_http_info(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_get_leaders  # noqa: E501

        获取用户上级信息 包含该用户关联的所有上级信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_get_leaders_with_http_info(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: list[SimpleDepartment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "lookup_value",
            "ordering",
            "page",
            "page_size",
            "fields",
            "lookup_field",
            "include_disabled",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_get_leaders" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_get_leaders`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "ordering" in params:
            query_params.append(("ordering", params["ordering"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("page_size", params["page_size"]))  # noqa: E501
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/leaders/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[SimpleDepartment]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_list(self, **kwargs):  # noqa: E501
        """v2_profiles_list  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 查询字段，针对 exact_lookups,fuzzy_lookups 生效
        :param list[str] exact_lookups: 精确查询 lookup_field 所指定的字段, 支持多选，以逗号分隔，例如: cat,dog,fish
        :param list[str] fuzzy_lookups: 模糊查询 lookup_field 所指定的字段, 支持多选，以逗号分隔，例如: cat,dog,fish
        :param str wildcard_search: 在多个字段模糊搜索的内容
        :param list[str] wildcard_search_fields: 指定多个模糊搜索字段
        :param bool best_match: 是否按照最短匹配排序
        :param str time_field: 时间过滤字段，支持 update_time, create_time
        :param datetime since: 筛选某个时间点后的记录
        :param datetime until: 筛选某个时间点前的记录
        :param bool include_disabled: 是否包含已软删除的数据
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_profiles_list_with_http_info(self, **kwargs):  # noqa: E501
        """v2_profiles_list  # noqa: E501

        获取用户列表  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :param list[str] fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 查询字段，针对 exact_lookups,fuzzy_lookups 生效
        :param list[str] exact_lookups: 精确查询 lookup_field 所指定的字段, 支持多选，以逗号分隔，例如: cat,dog,fish
        :param list[str] fuzzy_lookups: 模糊查询 lookup_field 所指定的字段, 支持多选，以逗号分隔，例如: cat,dog,fish
        :param str wildcard_search: 在多个字段模糊搜索的内容
        :param list[str] wildcard_search_fields: 指定多个模糊搜索字段
        :param bool best_match: 是否按照最短匹配排序
        :param str time_field: 时间过滤字段，支持 update_time, create_time
        :param datetime since: 筛选某个时间点后的记录
        :param datetime until: 筛选某个时间点前的记录
        :param bool include_disabled: 是否包含已软删除的数据
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "ordering",
            "page",
            "page_size",
            "fields",
            "lookup_field",
            "exact_lookups",
            "fuzzy_lookups",
            "wildcard_search",
            "wildcard_search_fields",
            "best_match",
            "time_field",
            "since",
            "until",
            "include_disabled",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_list" % key)
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "ordering" in params:
            query_params.append(("ordering", params["ordering"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("page_size", params["page_size"]))  # noqa: E501
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
            collection_formats["fields"] = "csv"  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "exact_lookups" in params:
            query_params.append(("exact_lookups", params["exact_lookups"]))  # noqa: E501
            collection_formats["exact_lookups"] = "csv"  # noqa: E501
        if "fuzzy_lookups" in params:
            query_params.append(("fuzzy_lookups", params["fuzzy_lookups"]))  # noqa: E501
            collection_formats["fuzzy_lookups"] = "csv"  # noqa: E501
        if "wildcard_search" in params:
            query_params.append(("wildcard_search", params["wildcard_search"]))  # noqa: E501
        if "wildcard_search_fields" in params:
            query_params.append(("wildcard_search_fields", params["wildcard_search_fields"]))  # noqa: E501
            collection_formats["wildcard_search_fields"] = "csv"  # noqa: E501
        if "best_match" in params:
            query_params.append(("best_match", params["best_match"]))  # noqa: E501
        if "time_field" in params:
            query_params.append(("time_field", params["time_field"]))  # noqa: E501
        if "since" in params:
            query_params.append(("since", params["since"]))  # noqa: E501
        if "until" in params:
            query_params.append(("until", params["until"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_modify_password(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_modify_password  # noqa: E501

        修改用户密码 不同于直接更新 password 字段，修改密码 API 面向普通用户，需要校验原密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_modify_password(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileModifyPassword body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_modify_password_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_modify_password_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_modify_password_with_http_info(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_modify_password  # noqa: E501

        修改用户密码 不同于直接更新 password 字段，修改密码 API 面向普通用户，需要校验原密码  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_modify_password_with_http_info(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ProfileModifyPassword body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method v2_profiles_modify_password" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v2_profiles_modify_password`"
            )  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_modify_password`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/modify_password/",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Empty",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_partial_update(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_partial_update  # noqa: E501

        更新用户部分字段  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_partial_update(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProfile body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_partial_update_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_partial_update_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_partial_update_with_http_info(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_partial_update  # noqa: E501

        更新用户部分字段  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_partial_update_with_http_info(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProfile body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method v2_profiles_partial_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError(
                "Missing the required parameter `body` when calling `v2_profiles_partial_update`"
            )  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_partial_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/",
            "PATCH",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Profile",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_read(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_read  # noqa: E501

        获取详细信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_read(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_read_with_http_info(lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_read_with_http_info(lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_read_with_http_info(self, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_read  # noqa: E501

        获取详细信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_read_with_http_info(lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_read" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_read`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Profile",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_profiles_update(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_update  # noqa: E501

        更新用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_update(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProfile body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_profiles_update_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_profiles_update_with_http_info(body, lookup_value, **kwargs)  # noqa: E501
            return data

    def v2_profiles_update_with_http_info(self, body, lookup_value, **kwargs):  # noqa: E501
        """v2_profiles_update  # noqa: E501

        更新用户  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_profiles_update_with_http_info(body, lookup_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateProfile body: (required)
        :param str lookup_value: (required)
        :param str fields: 指定对象返回字段，支持多选，以逗号分隔，例如: username,status,id
        :param str lookup_field: 指定查询字段，内容为 lookup_value 所属字段, 例如: username
        :param bool include_disabled: 是否包含已软删除的数据
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["body", "lookup_value", "fields", "lookup_field", "include_disabled"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_profiles_update" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'body' is set
        if "body" not in params or params["body"] is None:
            raise ValueError("Missing the required parameter `body` when calling `v2_profiles_update`")  # noqa: E501
        # verify the required parameter 'lookup_value' is set
        if "lookup_value" not in params or params["lookup_value"] is None:
            raise ValueError(
                "Missing the required parameter `lookup_value` when calling `v2_profiles_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "lookup_value" in params:
            path_params["lookup_value"] = params["lookup_value"]  # noqa: E501

        query_params = []
        if "fields" in params:
            query_params.append(("fields", params["fields"]))  # noqa: E501
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "include_disabled" in params:
            query_params.append(("include_disabled", params["include_disabled"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/profiles/{lookup_value}/",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Profile",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def v2_retrieve_by_token(self, token, **kwargs):  # noqa: E501
        """v2_retrieve_by_token  # noqa: E501

        通过 Token 获取用户 通过有效的 token 获取用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_retrieve_by_token(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str lookup_field: A search term.
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.v2_retrieve_by_token_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_retrieve_by_token_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def v2_retrieve_by_token_with_http_info(self, token, **kwargs):  # noqa: E501
        """v2_retrieve_by_token  # noqa: E501

        通过 Token 获取用户 通过有效的 token 获取用户信息  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_retrieve_by_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: (required)
        :param str lookup_field: A search term.
        :param str ordering: Which field to use when ordering the results.
        :param int page: A page number within the paginated result set.
        :param int page_size: Number of results to return per page.
        :return: Profile
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["token", "lookup_field", "ordering", "page", "page_size"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s'" " to method v2_retrieve_by_token" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'token' is set
        if "token" not in params or params["token"] is None:
            raise ValueError(
                "Missing the required parameter `token` when calling `v2_retrieve_by_token`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "token" in params:
            path_params["token"] = params["token"]  # noqa: E501

        query_params = []
        if "lookup_field" in params:
            query_params.append(("lookup_field", params["lookup_field"]))  # noqa: E501
        if "ordering" in params:
            query_params.append(("ordering", params["ordering"]))  # noqa: E501
        if "page" in params:
            query_params.append(("page", params["page"]))  # noqa: E501
        if "page_size" in params:
            query_params.append(("page_size", params["page_size"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(["application/json"])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/v2/token/{token}/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="Profile",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
