# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CategoryTestConnection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_url': 'str',
        'user': 'str',
        'password': 'str',
        'timeout_setting': 'int',
        'use_ssl': 'bool'
    }

    attribute_map = {
        'connection_url': 'connection_url',
        'user': 'user',
        'password': 'password',
        'timeout_setting': 'timeout_setting',
        'use_ssl': 'use_ssl'
    }

    def __init__(self, connection_url=None, user=None, password=None, timeout_setting=None, use_ssl=False):  # noqa: E501
        """CategoryTestConnection - a model defined in Swagger"""  # noqa: E501
        self._connection_url = None
        self._user = None
        self._password = None
        self._timeout_setting = None
        self._use_ssl = None
        self.discriminator = None
        self.connection_url = connection_url
        if user is not None:
            self.user = user
        if password is not None:
            self.password = password
        if timeout_setting is not None:
            self.timeout_setting = timeout_setting
        if use_ssl is not None:
            self.use_ssl = use_ssl

    @property
    def connection_url(self):
        """Gets the connection_url of this CategoryTestConnection.  # noqa: E501


        :return: The connection_url of this CategoryTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._connection_url

    @connection_url.setter
    def connection_url(self, connection_url):
        """Sets the connection_url of this CategoryTestConnection.


        :param connection_url: The connection_url of this CategoryTestConnection.  # noqa: E501
        :type: str
        """
        if connection_url is None:
            raise ValueError("Invalid value for `connection_url`, must not be `None`")  # noqa: E501

        self._connection_url = connection_url

    @property
    def user(self):
        """Gets the user of this CategoryTestConnection.  # noqa: E501


        :return: The user of this CategoryTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CategoryTestConnection.


        :param user: The user of this CategoryTestConnection.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def password(self):
        """Gets the password of this CategoryTestConnection.  # noqa: E501


        :return: The password of this CategoryTestConnection.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CategoryTestConnection.


        :param password: The password of this CategoryTestConnection.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def timeout_setting(self):
        """Gets the timeout_setting of this CategoryTestConnection.  # noqa: E501


        :return: The timeout_setting of this CategoryTestConnection.  # noqa: E501
        :rtype: int
        """
        return self._timeout_setting

    @timeout_setting.setter
    def timeout_setting(self, timeout_setting):
        """Sets the timeout_setting of this CategoryTestConnection.


        :param timeout_setting: The timeout_setting of this CategoryTestConnection.  # noqa: E501
        :type: int
        """

        self._timeout_setting = timeout_setting

    @property
    def use_ssl(self):
        """Gets the use_ssl of this CategoryTestConnection.  # noqa: E501


        :return: The use_ssl of this CategoryTestConnection.  # noqa: E501
        :rtype: bool
        """
        return self._use_ssl

    @use_ssl.setter
    def use_ssl(self, use_ssl):
        """Sets the use_ssl of this CategoryTestConnection.


        :param use_ssl: The use_ssl of this CategoryTestConnection.  # noqa: E501
        :type: bool
        """

        self._use_ssl = use_ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryTestConnection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryTestConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
