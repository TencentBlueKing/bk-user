# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class SyncTaskProcess(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'step': 'str',
        'status': 'str',
        'successful_count': 'int',
        'failed_count': 'int',
        'logs': 'str',
        'failed_records': 'list[object]'
    }

    attribute_map = {
        'step': 'step',
        'status': 'status',
        'successful_count': 'successful_count',
        'failed_count': 'failed_count',
        'logs': 'logs',
        'failed_records': 'failed_records'
    }

    def __init__(self, step=None, status=None, successful_count=None, failed_count=None, logs=None, failed_records=None):  # noqa: E501
        """SyncTaskProcess - a model defined in Swagger"""  # noqa: E501
        self._step = None
        self._status = None
        self._successful_count = None
        self._failed_count = None
        self._logs = None
        self._failed_records = None
        self.discriminator = None
        self.step = step
        self.status = status
        self.successful_count = successful_count
        self.failed_count = failed_count
        self.logs = logs
        self.failed_records = failed_records

    @property
    def step(self):
        """Gets the step of this SyncTaskProcess.  # noqa: E501

        同步步骤  # noqa: E501

        :return: The step of this SyncTaskProcess.  # noqa: E501
        :rtype: str
        """
        return self._step

    @step.setter
    def step(self, step):
        """Sets the step of this SyncTaskProcess.

        同步步骤  # noqa: E501

        :param step: The step of this SyncTaskProcess.  # noqa: E501
        :type: str
        """
        if step is None:
            raise ValueError("Invalid value for `step`, must not be `None`")  # noqa: E501
        allowed_values = ["users", "departments", "users_relationship", "dept_user_relationship"]  # noqa: E501
        if step not in allowed_values:
            raise ValueError(
                "Invalid value for `step` ({0}), must be one of {1}"  # noqa: E501
                .format(step, allowed_values)
            )

        self._step = step

    @property
    def status(self):
        """Gets the status of this SyncTaskProcess.  # noqa: E501

        执行状态  # noqa: E501

        :return: The status of this SyncTaskProcess.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncTaskProcess.

        执行状态  # noqa: E501

        :param status: The status of this SyncTaskProcess.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["successful", "failed", "running", "retrying"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def successful_count(self):
        """Gets the successful_count of this SyncTaskProcess.  # noqa: E501

        同步成功数量  # noqa: E501

        :return: The successful_count of this SyncTaskProcess.  # noqa: E501
        :rtype: int
        """
        return self._successful_count

    @successful_count.setter
    def successful_count(self, successful_count):
        """Sets the successful_count of this SyncTaskProcess.

        同步成功数量  # noqa: E501

        :param successful_count: The successful_count of this SyncTaskProcess.  # noqa: E501
        :type: int
        """
        if successful_count is None:
            raise ValueError("Invalid value for `successful_count`, must not be `None`")  # noqa: E501

        self._successful_count = successful_count

    @property
    def failed_count(self):
        """Gets the failed_count of this SyncTaskProcess.  # noqa: E501

        同步失败数量  # noqa: E501

        :return: The failed_count of this SyncTaskProcess.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this SyncTaskProcess.

        同步失败数量  # noqa: E501

        :param failed_count: The failed_count of this SyncTaskProcess.  # noqa: E501
        :type: int
        """
        if failed_count is None:
            raise ValueError("Invalid value for `failed_count`, must not be `None`")  # noqa: E501

        self._failed_count = failed_count

    @property
    def logs(self):
        """Gets the logs of this SyncTaskProcess.  # noqa: E501

        纯文本日志  # noqa: E501

        :return: The logs of this SyncTaskProcess.  # noqa: E501
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this SyncTaskProcess.

        纯文本日志  # noqa: E501

        :param logs: The logs of this SyncTaskProcess.  # noqa: E501
        :type: str
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")  # noqa: E501

        self._logs = logs

    @property
    def failed_records(self):
        """Gets the failed_records of this SyncTaskProcess.  # noqa: E501

        失败对象名称  # noqa: E501

        :return: The failed_records of this SyncTaskProcess.  # noqa: E501
        :rtype: list[object]
        """
        return self._failed_records

    @failed_records.setter
    def failed_records(self, failed_records):
        """Sets the failed_records of this SyncTaskProcess.

        失败对象名称  # noqa: E501

        :param failed_records: The failed_records of this SyncTaskProcess.  # noqa: E501
        :type: list[object]
        """
        if failed_records is None:
            raise ValueError("Invalid value for `failed_records`, must not be `None`")  # noqa: E501

        self._failed_records = failed_records

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncTaskProcess, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncTaskProcess):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
