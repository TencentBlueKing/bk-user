# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GlobalSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'key': 'str',
        'namespace': 'str',
        'region': 'str',
        'value': 'object',
        'create_time': 'datetime',
        'update_time': 'datetime',
        'enabled': 'bool',
        'meta': 'int'
    }

    attribute_map = {
        'id': 'id',
        'key': 'key',
        'namespace': 'namespace',
        'region': 'region',
        'value': 'value',
        'create_time': 'create_time',
        'update_time': 'update_time',
        'enabled': 'enabled',
        'meta': 'meta'
    }

    def __init__(self, id=None, key=None, namespace=None, region=None, value=None, create_time=None, update_time=None, enabled=None, meta=None):  # noqa: E501
        """GlobalSettings - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._key = None
        self._namespace = None
        self._region = None
        self._value = None
        self._create_time = None
        self._update_time = None
        self._enabled = None
        self._meta = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if namespace is not None:
            self.namespace = namespace
        if region is not None:
            self.region = region
        self.value = value
        if create_time is not None:
            self.create_time = create_time
        if update_time is not None:
            self.update_time = update_time
        if enabled is not None:
            self.enabled = enabled
        self.meta = meta

    @property
    def id(self):
        """Gets the id of this GlobalSettings.  # noqa: E501


        :return: The id of this GlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GlobalSettings.


        :param id: The id of this GlobalSettings.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this GlobalSettings.  # noqa: E501


        :return: The key of this GlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this GlobalSettings.


        :param key: The key of this GlobalSettings.  # noqa: E501
        :type: str
        """
        if key is not None and len(key) < 1:
            raise ValueError("Invalid value for `key`, length must be greater than or equal to `1`")  # noqa: E501

        self._key = key

    @property
    def namespace(self):
        """Gets the namespace of this GlobalSettings.  # noqa: E501


        :return: The namespace of this GlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this GlobalSettings.


        :param namespace: The namespace of this GlobalSettings.  # noqa: E501
        :type: str
        """
        if namespace is not None and len(namespace) < 1:
            raise ValueError("Invalid value for `namespace`, length must be greater than or equal to `1`")  # noqa: E501

        self._namespace = namespace

    @property
    def region(self):
        """Gets the region of this GlobalSettings.  # noqa: E501


        :return: The region of this GlobalSettings.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this GlobalSettings.


        :param region: The region of this GlobalSettings.  # noqa: E501
        :type: str
        """
        if region is not None and len(region) < 1:
            raise ValueError("Invalid value for `region`, length must be greater than or equal to `1`")  # noqa: E501

        self._region = region

    @property
    def value(self):
        """Gets the value of this GlobalSettings.  # noqa: E501


        :return: The value of this GlobalSettings.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this GlobalSettings.


        :param value: The value of this GlobalSettings.  # noqa: E501
        :type: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def create_time(self):
        """Gets the create_time of this GlobalSettings.  # noqa: E501


        :return: The create_time of this GlobalSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this GlobalSettings.


        :param create_time: The create_time of this GlobalSettings.  # noqa: E501
        :type: datetime
        """

        self._create_time = create_time

    @property
    def update_time(self):
        """Gets the update_time of this GlobalSettings.  # noqa: E501


        :return: The update_time of this GlobalSettings.  # noqa: E501
        :rtype: datetime
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this GlobalSettings.


        :param update_time: The update_time of this GlobalSettings.  # noqa: E501
        :type: datetime
        """

        self._update_time = update_time

    @property
    def enabled(self):
        """Gets the enabled of this GlobalSettings.  # noqa: E501


        :return: The enabled of this GlobalSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GlobalSettings.


        :param enabled: The enabled of this GlobalSettings.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def meta(self):
        """Gets the meta of this GlobalSettings.  # noqa: E501


        :return: The meta of this GlobalSettings.  # noqa: E501
        :rtype: int
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this GlobalSettings.


        :param meta: The meta of this GlobalSettings.  # noqa: E501
        :type: int
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
