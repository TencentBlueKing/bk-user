# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CategoryTestFetchData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_pull_node': 'str',
        'user_filter': 'str',
        'organization_class': 'str',
        'user_group_filter': 'str',
        'user_member_of': 'str'
    }

    attribute_map = {
        'basic_pull_node': 'basic_pull_node',
        'user_filter': 'user_filter',
        'organization_class': 'organization_class',
        'user_group_filter': 'user_group_filter',
        'user_member_of': 'user_member_of'
    }

    def __init__(self, basic_pull_node=None, user_filter=None, organization_class=None, user_group_filter=None, user_member_of=None):  # noqa: E501
        """CategoryTestFetchData - a model defined in Swagger"""  # noqa: E501
        self._basic_pull_node = None
        self._user_filter = None
        self._organization_class = None
        self._user_group_filter = None
        self._user_member_of = None
        self.discriminator = None
        self.basic_pull_node = basic_pull_node
        self.user_filter = user_filter
        self.organization_class = organization_class
        if user_group_filter is not None:
            self.user_group_filter = user_group_filter
        if user_member_of is not None:
            self.user_member_of = user_member_of

    @property
    def basic_pull_node(self):
        """Gets the basic_pull_node of this CategoryTestFetchData.  # noqa: E501


        :return: The basic_pull_node of this CategoryTestFetchData.  # noqa: E501
        :rtype: str
        """
        return self._basic_pull_node

    @basic_pull_node.setter
    def basic_pull_node(self, basic_pull_node):
        """Sets the basic_pull_node of this CategoryTestFetchData.


        :param basic_pull_node: The basic_pull_node of this CategoryTestFetchData.  # noqa: E501
        :type: str
        """
        if basic_pull_node is None:
            raise ValueError("Invalid value for `basic_pull_node`, must not be `None`")  # noqa: E501

        self._basic_pull_node = basic_pull_node

    @property
    def user_filter(self):
        """Gets the user_filter of this CategoryTestFetchData.  # noqa: E501


        :return: The user_filter of this CategoryTestFetchData.  # noqa: E501
        :rtype: str
        """
        return self._user_filter

    @user_filter.setter
    def user_filter(self, user_filter):
        """Sets the user_filter of this CategoryTestFetchData.


        :param user_filter: The user_filter of this CategoryTestFetchData.  # noqa: E501
        :type: str
        """
        if user_filter is None:
            raise ValueError("Invalid value for `user_filter`, must not be `None`")  # noqa: E501

        self._user_filter = user_filter

    @property
    def organization_class(self):
        """Gets the organization_class of this CategoryTestFetchData.  # noqa: E501


        :return: The organization_class of this CategoryTestFetchData.  # noqa: E501
        :rtype: str
        """
        return self._organization_class

    @organization_class.setter
    def organization_class(self, organization_class):
        """Sets the organization_class of this CategoryTestFetchData.


        :param organization_class: The organization_class of this CategoryTestFetchData.  # noqa: E501
        :type: str
        """
        if organization_class is None:
            raise ValueError("Invalid value for `organization_class`, must not be `None`")  # noqa: E501

        self._organization_class = organization_class

    @property
    def user_group_filter(self):
        """Gets the user_group_filter of this CategoryTestFetchData.  # noqa: E501


        :return: The user_group_filter of this CategoryTestFetchData.  # noqa: E501
        :rtype: str
        """
        return self._user_group_filter

    @user_group_filter.setter
    def user_group_filter(self, user_group_filter):
        """Sets the user_group_filter of this CategoryTestFetchData.


        :param user_group_filter: The user_group_filter of this CategoryTestFetchData.  # noqa: E501
        :type: str
        """

        self._user_group_filter = user_group_filter

    @property
    def user_member_of(self):
        """Gets the user_member_of of this CategoryTestFetchData.  # noqa: E501


        :return: The user_member_of of this CategoryTestFetchData.  # noqa: E501
        :rtype: str
        """
        return self._user_member_of

    @user_member_of.setter
    def user_member_of(self, user_member_of):
        """Sets the user_member_of of this CategoryTestFetchData.


        :param user_member_of: The user_member_of of this CategoryTestFetchData.  # noqa: E501
        :type: str
        """

        self._user_member_of = user_member_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryTestFetchData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryTestFetchData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
