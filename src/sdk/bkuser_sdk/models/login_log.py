# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LoginLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'extra_value': 'object',
        'operator': 'str',
        'is_success': 'bool',
        'reason': 'str',
        'create_time': 'datetime',
        'username': 'str',
        'profile_id': 'str',
        'category_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'extra_value': 'extra_value',
        'operator': 'operator',
        'is_success': 'is_success',
        'reason': 'reason',
        'create_time': 'create_time',
        'username': 'username',
        'profile_id': 'profile_id',
        'category_id': 'category_id'
    }

    def __init__(self, id=None, extra_value=None, operator=None, is_success=None, reason=None, create_time=None, username=None, profile_id=None, category_id=None):  # noqa: E501
        """LoginLog - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._extra_value = None
        self._operator = None
        self._is_success = None
        self._reason = None
        self._create_time = None
        self._username = None
        self._profile_id = None
        self._category_id = None
        self.discriminator = None
        self.id = id
        self.extra_value = extra_value
        self.operator = operator
        self.is_success = is_success
        self.reason = reason
        self.create_time = create_time
        self.username = username
        self.profile_id = profile_id
        self.category_id = category_id

    @property
    def id(self):
        """Gets the id of this LoginLog.  # noqa: E501

        ID  # noqa: E501

        :return: The id of this LoginLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LoginLog.

        ID  # noqa: E501

        :param id: The id of this LoginLog.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def extra_value(self):
        """Gets the extra_value of this LoginLog.  # noqa: E501

        额外信息  # noqa: E501

        :return: The extra_value of this LoginLog.  # noqa: E501
        :rtype: object
        """
        return self._extra_value

    @extra_value.setter
    def extra_value(self, extra_value):
        """Sets the extra_value of this LoginLog.

        额外信息  # noqa: E501

        :param extra_value: The extra_value of this LoginLog.  # noqa: E501
        :type: object
        """
        if extra_value is None:
            raise ValueError("Invalid value for `extra_value`, must not be `None`")  # noqa: E501

        self._extra_value = extra_value

    @property
    def operator(self):
        """Gets the operator of this LoginLog.  # noqa: E501

        操作者  # noqa: E501

        :return: The operator of this LoginLog.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this LoginLog.

        操作者  # noqa: E501

        :param operator: The operator of this LoginLog.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def is_success(self):
        """Gets the is_success of this LoginLog.  # noqa: E501

        是否成功  # noqa: E501

        :return: The is_success of this LoginLog.  # noqa: E501
        :rtype: bool
        """
        return self._is_success

    @is_success.setter
    def is_success(self, is_success):
        """Sets the is_success of this LoginLog.

        是否成功  # noqa: E501

        :param is_success: The is_success of this LoginLog.  # noqa: E501
        :type: bool
        """
        if is_success is None:
            raise ValueError("Invalid value for `is_success`, must not be `None`")  # noqa: E501

        self._is_success = is_success

    @property
    def reason(self):
        """Gets the reason of this LoginLog.  # noqa: E501

        失败原因  # noqa: E501

        :return: The reason of this LoginLog.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this LoginLog.

        失败原因  # noqa: E501

        :param reason: The reason of this LoginLog.  # noqa: E501
        :type: str
        """
        if reason is None:
            raise ValueError("Invalid value for `reason`, must not be `None`")  # noqa: E501

        self._reason = reason

    @property
    def create_time(self):
        """Gets the create_time of this LoginLog.  # noqa: E501

        创建时间  # noqa: E501

        :return: The create_time of this LoginLog.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this LoginLog.

        创建时间  # noqa: E501

        :param create_time: The create_time of this LoginLog.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def username(self):
        """Gets the username of this LoginLog.  # noqa: E501

        登录用户  # noqa: E501

        :return: The username of this LoginLog.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LoginLog.

        登录用户  # noqa: E501

        :param username: The username of this LoginLog.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def profile_id(self):
        """Gets the profile_id of this LoginLog.  # noqa: E501

        登录用户ID  # noqa: E501

        :return: The profile_id of this LoginLog.  # noqa: E501
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this LoginLog.

        登录用户ID  # noqa: E501

        :param profile_id: The profile_id of this LoginLog.  # noqa: E501
        :type: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")  # noqa: E501

        self._profile_id = profile_id

    @property
    def category_id(self):
        """Gets the category_id of this LoginLog.  # noqa: E501

        登录用户  # noqa: E501

        :return: The category_id of this LoginLog.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this LoginLog.

        登录用户  # noqa: E501

        :param category_id: The category_id of this LoginLog.  # noqa: E501
        :type: str
        """
        if category_id is None:
            raise ValueError("Invalid value for `category_id`, must not be `None`")  # noqa: E501

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
