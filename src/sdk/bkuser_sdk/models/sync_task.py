# coding: utf-8

"""
    蓝鲸用户管理 API

    蓝鲸用户管理后台服务 API  # noqa: E501

    OpenAPI spec version: v2

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bkuser_sdk.models.category import Category  # noqa: F401,E501


class SyncTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'category': 'Category',
        'status': 'str',
        'type': 'str',
        'operator': 'str',
        'create_time': 'datetime',
        'required_time': 'str',
        'retried_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'category': 'category',
        'status': 'status',
        'type': 'type',
        'operator': 'operator',
        'create_time': 'create_time',
        'required_time': 'required_time',
        'retried_count': 'retried_count'
    }

    def __init__(self, id=None, category=None, status=None, type=None, operator=None, create_time=None, required_time=None, retried_count=None):  # noqa: E501
        """SyncTask - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._category = None
        self._status = None
        self._type = None
        self._operator = None
        self._create_time = None
        self._required_time = None
        self._retried_count = None
        self.discriminator = None
        self.id = id
        self.category = category
        self.status = status
        self.type = type
        self.operator = operator
        self.create_time = create_time
        self.required_time = required_time
        self.retried_count = retried_count

    @property
    def id(self):
        """Gets the id of this SyncTask.  # noqa: E501


        :return: The id of this SyncTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SyncTask.


        :param id: The id of this SyncTask.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category(self):
        """Gets the category of this SyncTask.  # noqa: E501


        :return: The category of this SyncTask.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SyncTask.


        :param category: The category of this SyncTask.  # noqa: E501
        :type: Category
        """
        if category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def status(self):
        """Gets the status of this SyncTask.  # noqa: E501

        任务执行状态  # noqa: E501

        :return: The status of this SyncTask.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SyncTask.

        任务执行状态  # noqa: E501

        :param status: The status of this SyncTask.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["successful", "failed", "running", "retrying"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this SyncTask.  # noqa: E501

        任务触发类型  # noqa: E501

        :return: The type of this SyncTask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SyncTask.

        任务触发类型  # noqa: E501

        :param type: The type of this SyncTask.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["manual", "auto"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operator(self):
        """Gets the operator of this SyncTask.  # noqa: E501

        操作人  # noqa: E501

        :return: The operator of this SyncTask.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this SyncTask.

        操作人  # noqa: E501

        :param operator: The operator of this SyncTask.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def create_time(self):
        """Gets the create_time of this SyncTask.  # noqa: E501

        开始时间  # noqa: E501

        :return: The create_time of this SyncTask.  # noqa: E501
        :rtype: datetime
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this SyncTask.

        开始时间  # noqa: E501

        :param create_time: The create_time of this SyncTask.  # noqa: E501
        :type: datetime
        """
        if create_time is None:
            raise ValueError("Invalid value for `create_time`, must not be `None`")  # noqa: E501

        self._create_time = create_time

    @property
    def required_time(self):
        """Gets the required_time of this SyncTask.  # noqa: E501

        耗时  # noqa: E501

        :return: The required_time of this SyncTask.  # noqa: E501
        :rtype: str
        """
        return self._required_time

    @required_time.setter
    def required_time(self, required_time):
        """Sets the required_time of this SyncTask.

        耗时  # noqa: E501

        :param required_time: The required_time of this SyncTask.  # noqa: E501
        :type: str
        """
        if required_time is None:
            raise ValueError("Invalid value for `required_time`, must not be `None`")  # noqa: E501

        self._required_time = required_time

    @property
    def retried_count(self):
        """Gets the retried_count of this SyncTask.  # noqa: E501

        重试次数  # noqa: E501

        :return: The retried_count of this SyncTask.  # noqa: E501
        :rtype: int
        """
        return self._retried_count

    @retried_count.setter
    def retried_count(self, retried_count):
        """Sets the retried_count of this SyncTask.

        重试次数  # noqa: E501

        :param retried_count: The retried_count of this SyncTask.  # noqa: E501
        :type: int
        """
        if retried_count is None:
            raise ValueError("Invalid value for `retried_count`, must not be `None`")  # noqa: E501

        self._retried_count = retried_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SyncTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
